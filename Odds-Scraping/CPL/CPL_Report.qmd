---
title: "CPL Report"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.time()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

**Timestamp**: `r format(Sys.time(), "%d-%m-%Y %H:%M:%S %Z")`

```{r}
# Load Libraries
library(tidyverse)

# Read in data
processed_odds_files <- list.files("../../Data/T20s/CPL/processed_odds", full.names = TRUE)

# Read in all data
processed_odds_data <-
  map(processed_odds_files, read_rds) |> 
  set_names(basename(processed_odds_files) |> str_remove("\\.rds"))
```

::: panel-tabset
## Middles

### Player Runs

```{r}
# Get all player runs over data
player_runs_overs <-
  processed_odds_data$player_runs |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all player runs under data
player_runs_unders <-
  processed_odds_data$player_runs |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
player_runs <-
  player_runs_overs |> 
  inner_join(player_runs_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.1) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(player_runs) > 0) {
  player_runs
} else {
  cat("No middles found")
}
```

### Fall of First Wicket

```{r}
# Get all FOFW over data
fofw_overs <-
  processed_odds_data$runs_at_first_wicket |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

# Get all FOFW under data
fofw_unders <-
  processed_odds_data$runs_at_first_wicket |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

# Combine
fofw <-
  fofw_overs |> 
  inner_join(fofw_unders, relationship = "many-to-many") |> 
  select(match, market, team, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.1) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(fofw) > 0) {
  fofw
} else {
  cat("No middles found")
}
```

### First Over Runs

```{r}
# Get all First Over Runs over data
for_overs <-
  processed_odds_data$first_over_runs |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

# Get all First Over Runs under data
for_unders <-
  processed_odds_data$first_over_runs |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

# Combine
first_over_runs <-
  for_overs |> 
  inner_join(for_unders, relationship = "many-to-many") |> 
  select(match, market, team, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.25) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(first_over_runs) > 0) {
  first_over_runs
} else {
  cat("No middles found")
}
```

### Team Fours

```{r}
# Get all team fours over data
team_fours_overs <-
  processed_odds_data$team_fours |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

# Get all team fours under data
team_fours_unders <-
  processed_odds_data$team_fours |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

# Combine
team_fours <-
  team_fours_overs |> 
  inner_join(team_fours_unders, relationship = "many-to-many") |> 
  select(match, market, team, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.2) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(team_fours) > 0) {
  team_fours
} else {
  cat("No middles found")
}
```

### Team Sixes

```{r}
# Get all team sixes over data
team_sixes_overs <-
  processed_odds_data$team_sixes |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

# Get all team sixes under data
team_sixes_unders <-
  processed_odds_data$team_sixes |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

# Combine
team_sixes <-
  team_sixes_overs |> 
  inner_join(team_sixes_unders, relationship = "many-to-many") |> 
  select(match, market, team, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.2) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(team_sixes) > 0) {
  team_sixes
} else {
  cat("No middles found")
}
```

### Match Fours

```{r}
# Get all match fours
match_fours_overs <-
  processed_odds_data$match_fours |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

match_fours_unders <-
  processed_odds_data$match_fours |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

match_fours <-
  match_fours_overs |> 
  inner_join(match_fours_unders, relationship = "many-to-many") |> 
  select(match, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.2) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(match_fours) > 0) {
  match_fours
} else {
  cat("No middles found")
}
```

### Match Sixes

```{r}
# Get all match sixes
match_sixes_overs <-
  processed_odds_data$match_sixes |>
  select(-under_price) |>
  rename(over_agency = agency, over_line = line)

match_sixes_unders <-
  processed_odds_data$match_sixes |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency, under_line = line)

match_sixes <-
  match_sixes_overs |> 
  inner_join(match_sixes_unders, relationship = "many-to-many") |> 
  select(match, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1.2) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(match_sixes) > 0) {
  match_sixes
} else {
  cat("No middles found")
}
```

## Arbs

### Player Runs

```{r}
# Get all player runs over data
player_runs_overs <-
  processed_odds_data$player_runs |>
  mutate(opposition_team = NA) |>
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency)

# Get all player runs under data
player_runs_unders <-
  processed_odds_data$player_runs |>
  mutate(opposition_team = NA) |>
  filter(!is.na(under_price)) |> 
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency)

# Combine
player_runs <-
  player_runs_overs |> 
  inner_join(player_runs_unders) |> 
  select(match, player_name, market, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(player_runs) > 0) {
  player_runs
} else {
  cat("No arbitrage opportunities found")
}
```

### Fall of First Wicket

```{r}
# Get all FOFW over data
fofw_overs <-
  processed_odds_data$runs_at_first_wicket |>
  select(-under_price) |>
  rename(over_agency = agency)

# Get all FOFW under data
fofw_unders <-
  processed_odds_data$runs_at_first_wicket |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

# Combine
fofw <-
  fofw_overs |> 
  inner_join(fofw_unders) |> 
  select(match, market, team, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(fofw) > 0) {
  fofw
} else {
  cat("No arbitrage opportunities found")
}
```

### First Over Runs

```{r}
# Get all First Over Runs over data
for_overs <-
  processed_odds_data$first_over_runs |>
  select(-under_price) |>
  rename(over_agency = agency)

# Get all First Over Runs under data
for_unders <-
  processed_odds_data$first_over_runs |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

# Combine
first_over_runs <-
  for_overs |> 
  inner_join(for_unders) |> 
  select(match, market, team, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(first_over_runs) > 0) {
  first_over_runs
} else {
  cat("No arbitrage opportunities found")
}
```

### Team Fours

```{r}
# Get all team fours over data
team_fours_overs <-
  processed_odds_data$team_fours |>
  select(-under_price) |>
  rename(over_agency = agency)

# Get all team fours under data
team_fours_unders <-
  processed_odds_data$team_fours |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

# Combine
team_fours <-
  team_fours_overs |> 
  inner_join(team_fours_unders) |> 
  select(match, market, team, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(team_fours) > 0) {
  team_fours
} else {
  cat("No arbitrage opportunities found")
}
```

### Team Sixes

```{r}
# Get all team sixes over data
team_sixes_overs <-
  processed_odds_data$team_sixes |>
  select(-under_price) |>
  rename(over_agency = agency)

# Get all team sixes under data
team_sixes_unders <-
  processed_odds_data$team_sixes |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

# Combine
team_sixes <-
  team_sixes_overs |> 
  inner_join(team_sixes_unders) |> 
  select(match, market, line, team, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(team_sixes) > 0) {
  team_sixes
} else {
  cat("No arbitrage opportunities found")
}
```

### Match Fours

```{r}
# Get all match fours
match_fours_overs <-
  processed_odds_data$match_fours |>
  select(-under_price) |>
  rename(over_agency = agency)

match_fours_unders <-
  processed_odds_data$match_fours |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

match_fours <-
  match_fours_overs |> 
  inner_join(match_fours_unders) |> 
  select(match, market, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(match_fours) > 0) {
  match_fours
} else {
  cat("No arbitrage opportunities found")
}
```

### Match Sixes

```{r}
# Get all match sixes
match_sixes_overs <-
  processed_odds_data$match_sixes |>
  select(-under_price) |>
  rename(over_agency = agency)

match_sixes_unders <-
  processed_odds_data$match_sixes |>
  filter(!is.na(under_price)) |> 
  select(-over_price) |>
  rename(under_agency = agency)

match_sixes <-
  match_sixes_overs |> 
  inner_join(match_sixes_unders) |> 
  select(match, market, line, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  mutate(margin = round(1 / over_price + 1 / under_price, 2)) |>
  filter(margin <= 1) |> 
  arrange(margin)

if (nrow(match_sixes) > 0) {
  match_sixes
} else {
  cat("No arbitrage opportunities found")
}
```
:::
